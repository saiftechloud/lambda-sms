AWSTemplateFormatVersion: "2010-09-09"
Description: "SMS sender Cloudformation Stack"

Resources:
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: sms-sender-source-bucket-1
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt LambdaFunction.Arn
          Filter :
            S3Key:
              Rules: 
                - Name: prefix
                  Value: data.csv

  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: arn:aws:s3:::sms-sender-source-bucket-1

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import boto3
          import csv

          # Create Boto3 S3 Client
          snsClient = boto3.client("sns")

          # Create Boto3 S3 Client
          s3Client  = boto3.resource(u's3')

          # get a handle on the bucket that holds your file
          bucket = s3Client.Bucket(u'sms-sender-source-bucket-1')

          # get a handle on the object you want (i.e. your file (data.csv))
          obj = bucket.Object(key=u'data.csv')

          def handler(event, context):
              try:
                  #get the object
                  response = obj.get()
                  lines = response['Body'].read().decode('utf-8').split()
                  reader = csv.reader(lines)
                  # iterrate row by row
                  for row in reader:
                      #check whether row is having 3 colums (Name, phoneNumber, message)
                      if len(row) ==3:
                          print(row)
                          response = snsClient.publish(
                              PhoneNumber=row[1],
                              Message="Hello " + row[0] + " Hope you having a great day , This message is to make your day better. 50% discount on entire store this July the 4th ",
                              MessageAttributes = {
                                'AWS.SNS.SMS.SMSType': {
                                    'DataType': 'String',
                                    'StringValue': 'Promotional'
                                }
                              }
                          )
                          print(response)
              except:
                  print("An exception occurred")
      Description: "send bulk SMS"
      FunctionName: sms-sender-Lambda
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python3.7"
      Timeout: 900


  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: sms-sender-LambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Effect: "Allow"
                Resource: "arn:aws:s3:::sms-sender-source-bucket*"
                Effect: "Allow"
          PolicyName: "sms-sender-LambdaRole-ReadS3-Policy"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "sns:Publish"
                Effect: "Allow"
                Resource: "*"
                Effect: "Allow"
          PolicyName: "sms-sender-LambdaRole-SNSPublish-Policy"
Outputs:
  FileInputBucket:
    Value: !Ref SourceBucket

